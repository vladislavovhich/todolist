{"version":3,"sources":["serviceWorker.ts","components/Header.tsx","store/todoReducer.ts","components/Todo/TodoItem.tsx","components/Todo/TodoItemsPane.tsx","components/Todo/TodoItemAddPane.tsx","components/Todo/TodoPanel.tsx","components/Main.tsx","components/App.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Header","className","icon","fixedWidth","initState","todoItems","todoItemDescription","todoItemTitle","editingTodoItemNumber","hasEditingTodoItem","actions","title","description","type","value","todoReducer","state","action","completed","map","item","index","filter","toggleCompleted","removeTodoItem","setEditingTodoNumber","TodoItem","props","dispatch","useDispatch","useSelector","todoPage","onClickToggleCompleted","onClick","disabled","confirm","TodoItemsPane","todoItem","key","addTodoItem","setTodoItemDescription","setTodoItemTitle","setTodoItem","TodoItemAddPane","placeholder","autoFocus","onChange","e","target","rows","trim","alert","TodoPanel","Main","App","reducers","combineReducers","store","createStore","library","add","faTimes","faCheckSquare","faClipboardList","faCog","faTrashAlt","faTimesCircle","faPlus","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81f96cbf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport \"../scss/Header.scss\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\ntype PropsType = {};\r\n\r\nconst Header: React.FC<PropsType> = () => {\r\n    return (\r\n        <header className=\"Header\">\r\n            <div className=\"container h-100 d-flex align-items-center justify-content-center\">\r\n                <div className=\"Logo d-flex flex-row align-items-center justify-content-center\">\r\n                    <div className=\"mr-1\">TodoList</div>\r\n                    <FontAwesomeIcon icon=\"clipboard-list\" fixedWidth={true}/>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import {CombineActions} from \"./store\"\r\nimport {TodoItemType} from \"./types\";\r\n\r\nconst initState = {\r\n    todoItems: [] as TodoItemType[],\r\n    todoItemDescription: \"\",\r\n    todoItemTitle: \"\",\r\n    editingTodoItemNumber: -1,\r\n    hasEditingTodoItem: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\nexport type ActionsTypes = ReturnType<CombineActions<typeof actions>>\r\n\r\nconst todoReducer = (state: InitStateType = initState, action: ActionsTypes): InitStateType => {\r\n    switch (action.type) {\r\n        case \"todo/ADD_TODO_ITEM\": {\r\n            return {\r\n                ...state,\r\n                todoItemTitle: \"\",\r\n                todoItemDescription: \"\",\r\n                todoItems: [\r\n                    ...state.todoItems, {\r\n                        title: action.title,\r\n                        description: action.description,\r\n                        completed: false\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        case \"todo/TOGGLE_COMPLETED\": {\r\n            return {\r\n                ...state,\r\n                todoItems: state.todoItems.map((item, index) => {\r\n                    if (index === action.index) {\r\n                        return {\r\n                            ...item,\r\n                            completed: !item.completed\r\n                        }\r\n                    }\r\n\r\n                    return item\r\n                })\r\n            }\r\n        }\r\n        case \"todo/REMOVE_TODO_ITEM\": {\r\n            return {\r\n                ...state,\r\n                todoItems: state.todoItems.filter((item, index) => index !== action.index)\r\n            }\r\n        }\r\n        case \"todo/SET_TODO_ITEM_DESCRIPTION\": {\r\n            return {\r\n                ...state,\r\n                todoItemDescription: action.value\r\n            }\r\n        }\r\n        case \"todo/SET_TODO_ITEM_TITLE\": {\r\n            return {\r\n                ...state,\r\n                todoItemTitle: action.value\r\n            }\r\n        }\r\n        case \"todo/SET_EDITING_TODO_NUMBER\": {\r\n            return {\r\n                ...state,\r\n                hasEditingTodoItem: true,\r\n                editingTodoItemNumber: action.index,\r\n                todoItemDescription: state.todoItems[action.index].description,\r\n                todoItemTitle: state.todoItems[action.index].title\r\n            }\r\n        }\r\n        case \"todo/SET_TODO_ITEM\": {\r\n            const todoItems = [...state.todoItems]\r\n            todoItems[state.editingTodoItemNumber] = {\r\n                ...todoItems[state.editingTodoItemNumber],\r\n                title: action.title,\r\n                description: action.description,\r\n            } as TodoItemType\r\n\r\n            return {\r\n                ...state,\r\n                todoItems: todoItems,\r\n                editingTodoItemNumber: -1,\r\n                hasEditingTodoItem: false,\r\n                todoItemTitle: \"\",\r\n                todoItemDescription: \"\"\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addTodoItem: (title:string, description:string) => ({\r\n        type: \"todo/ADD_TODO_ITEM\",\r\n        title: title,\r\n        description: description\r\n    } as const),\r\n    setTodoItem:(title:string, description:string) => ({\r\n        type: \"todo/SET_TODO_ITEM\",\r\n        title: title,\r\n        description: description\r\n    } as const),\r\n    removeTodoItem: (index:number) => ({\r\n        type: \"todo/REMOVE_TODO_ITEM\",\r\n        index: index\r\n    } as const),\r\n    toggleCompleted: (index:number) => ({\r\n        type: \"todo/TOGGLE_COMPLETED\",\r\n        index: index\r\n    } as const),\r\n    setTodoItemTitle: (value:string) => ({\r\n        type: \"todo/SET_TODO_ITEM_TITLE\",\r\n        value: value\r\n    } as const),\r\n    setTodoItemDescription: (value:string) => ({\r\n        type: \"todo/SET_TODO_ITEM_DESCRIPTION\",\r\n        value: value\r\n    } as const),\r\n    setEditingTodoNumber: (index:number) => ({\r\n        type: \"todo/SET_EDITING_TODO_NUMBER\",\r\n        index: index\r\n    } as const)\r\n}\r\n\r\nexport default todoReducer","import React from \"react\"\r\nimport \"../../scss/TodoPanel/TodoItem.scss\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actions} from \"../../store/todoReducer\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst {toggleCompleted, removeTodoItem, setEditingTodoNumber} = actions\r\n\r\ntype PropsType = {\r\n    title:string\r\n    description:string\r\n    completed:boolean\r\n    index:number\r\n}\r\n\r\nconst TodoItem: React.FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const hasEditingTodoItem = useSelector((state:StateType) => state.todoPage.hasEditingTodoItem)\r\n\r\n    const onClickToggleCompleted = () => {\r\n        dispatch(toggleCompleted(props.index))\r\n    }\r\n    const onClickRemoveTodoItem = () => {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (confirm(\"Вы действительно хотите удалить задачу?\")) {\r\n            dispatch(removeTodoItem(props.index))\r\n        }\r\n    }\r\n    const onClickEditTodoItem = () => {\r\n        dispatch(setEditingTodoNumber(props.index))\r\n    }\r\n\r\n    return (\r\n        <div className=\"TodoItem col-12 col-xl-6 col-lg-8 col-md-9 col-sm-10 col-xs-11\">\r\n            <div className=\"d-flex flex-column\">\r\n                <div className=\"TodoItem__top d-flex flex-row justify-content-between\">\r\n                    <div className=\"TodoItem__title\">\r\n                        {props.title}\r\n                    </div>\r\n\r\n                    <div className=\"TodoItem__editing d-flex flex-row\">\r\n                        <button\r\n                            onClick={onClickEditTodoItem}\r\n                            disabled={hasEditingTodoItem}\r\n                        >\r\n                            <FontAwesomeIcon icon=\"cog\" fixedWidth={true}/>\r\n                        </button>\r\n                        <button\r\n                            className=\"ml-2\"\r\n                            onClick={onClickRemoveTodoItem}\r\n                            disabled={hasEditingTodoItem}\r\n                        >\r\n                            <FontAwesomeIcon icon=\"trash-alt\" fixedWidth={true}/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"TodoItem__mid\">\r\n                    <div className=\"TodoItem__description\">\r\n                        {props.description}\r\n                    </div>\r\n                </div>\r\n                <div className=\"TodoItem__bottom align-self-start\">\r\n                    <div className=\"TodoItem__status d-flex flex-row\">\r\n                        {(props.completed) ? (\r\n                            <div\r\n                                className=\"TodoItem__completed d-flex flex-row align-items-center\"\r\n                                onClick={onClickToggleCompleted}\r\n                            >\r\n                                <div className=\"mr-1\">Выполнена</div>\r\n                                <FontAwesomeIcon icon=\"check-square\"/>\r\n                            </div>\r\n                        ) : (\r\n                            <div\r\n                                className=\"TodoItem__uncompleted d-flex flex-row align-items-center\"\r\n                                onClick={onClickToggleCompleted}\r\n                            >\r\n                                <div className=\"mr-1\">Невыполнена</div>\r\n                                <FontAwesomeIcon icon=\"times-circle\"/>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem;","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport {TodoItemType} from \"../../store/types\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nimport \"../../scss/TodoPanel/TodoItemsPane.scss\"\r\n\r\ntype PropsType = {};\r\n\r\nconst TodoItemsPane: React.FC<PropsType> = (props) => {\r\n    const todoItems:TodoItemType[] = useSelector((state:StateType) => state.todoPage.todoItems)\r\n\r\n    return (\r\n        <div className=\"TodoItemsPane d-flex flex-column mt-3\">\r\n            <div className=\"d-flex flex-column align-items-center\">\r\n                {todoItems.map((todoItem, index) => {\r\n                    return (\r\n                        <TodoItem\r\n                            title={todoItem.title}\r\n                            description={todoItem.description}\r\n                            completed={todoItem.completed}\r\n                            index={index}\r\n\r\n                            key={index}\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoItemsPane;","import React from \"react\";\r\nimport \"../../scss/TodoPanel/TodoItemAddPane.scss\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actions} from \"../../store/todoReducer\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst {addTodoItem, setTodoItemDescription, setTodoItemTitle, setTodoItem} = actions\r\n\r\ntype PropsType = {};\r\n\r\nconst TodoItemAddPane: React.FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const todoItemTitle = useSelector((state:StateType) => state.todoPage.todoItemTitle)\r\n    const todoItemDescription = useSelector((state:StateType) => state.todoPage.todoItemDescription)\r\n\r\n    const hasEditingTodoItem = useSelector((state:StateType) => state.todoPage.hasEditingTodoItem)\r\n\r\n    const onClickAddTodoItem = () => {\r\n        if (!todoItemDescription.trim() || !todoItemTitle.trim()) {\r\n            alert(\"Вы не заполнили все поля!\")\r\n        } else {\r\n            dispatch(addTodoItem(todoItemTitle, todoItemDescription))\r\n        }\r\n    }\r\n    const onChangeSetTodoItemTitle = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setTodoItemTitle(e.target.value))\r\n    }\r\n    const onChangeSetTodoItemDescription = (e:React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        dispatch(setTodoItemDescription(e.target.value))\r\n    }\r\n    const onClickSaveTodoItem = () => {\r\n        dispatch(setTodoItem(todoItemTitle, todoItemDescription))\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div className=\"col-12 col-xl-6 col-lg-8 col-md-9 col-sm-10 col-xs-11\">\r\n                <div className=\"TodoItemAddPane d-flex flex-column align-items-center\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Название задачи\"\r\n                        className=\"TodoItemAddPane__title\"\r\n                        autoFocus={true}\r\n                        value={todoItemTitle}\r\n                        onChange={onChangeSetTodoItemTitle}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Описание задачи\"\r\n                        className=\"TodoItemAddPane__description mt-2\"\r\n                        rows={3}\r\n                        value={todoItemDescription}\r\n                        onChange={onChangeSetTodoItemDescription}\r\n                    />\r\n\r\n                    <input\r\n                        type=\"button\"\r\n                        value={hasEditingTodoItem ? \"Сохранить\" : \"Добавить\"}\r\n                        className=\"TodoItemAddPane__addBtn mt-2\"\r\n                        onClick={hasEditingTodoItem ? onClickSaveTodoItem : onClickAddTodoItem}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoItemAddPane;","import React from \"react\";\r\nimport TodoItemsPane from \"./TodoItemsPane\";\r\nimport TodoItemAddPane from \"./TodoItemAddPane\";\r\n\r\ntype PropsType = {};\r\n\r\nconst TodoPanel: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"TodoPanel d-flex flex-column\">\r\n            <TodoItemAddPane />\r\n            <TodoItemsPane />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoPanel;","import React from \"react\";\r\nimport TodoPanel from \"./Todo/TodoPanel\";\r\n\r\ntype PropsType = {};\r\n\r\nconst Main: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <main className=\"Main py-3\">\r\n            <div className=\"container\">\r\n                <TodoPanel />\r\n            </div>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\nimport \"../scss/App.scss\"\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\n\r\ntype PropsType = {};\r\n\r\nconst App: React.FC<PropsType> = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Main/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default App;","import {combineReducers, createStore} from \"redux\";\r\nimport todoReducer from \"./todoReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    todoPage: todoReducer\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport type StateType = ReturnType<typeof reducers>;\r\nexport type CombineActions<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import ReactDOM from 'react-dom';\nimport React from \"react\"\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport App from \"./components/App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\"\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faTimes, faCheckSquare, faClipboardList, faCog, faTrashAlt, faTimesCircle, faPlus} from \"@fortawesome/free-solid-svg-icons\";\nimport {HashRouter} from \"react-router-dom\";\n\nlibrary.add(faTimes, faCheckSquare, faClipboardList, faCog, faTrashAlt, faTimesCircle, faPlus)\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}